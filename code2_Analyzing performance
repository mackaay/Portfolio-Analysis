# The package PerformanceAnalytics and xts, and the variable sp500 are pre-loaded

# Convert the daily frequency of sp500 to monthly frequency
sp500_monthly <- to.monthly(sp500)

# Print the first six rows of sp500_monthly
head(sp500_monthly)

# Create sp500_returns using Return.calculate using the closing prices
sp500_returns <- Return.calculate(sp500_monthly[,-c(1,2,3)] )

# Time series plot
plot.zoo(sp500_returns)

# Produce the year x month table
table.CalendarReturns(sp500_returns)

### monthly mean and volatility###
# sp500_returns is pre-loaded

# Compute the mean monthly returns
mean(sp500_returns)

# Compute the geometric mean of monthly returns
mean.geometric(sp500_returns)

# Compute the standard deviation
sd(sp500_returns)

####################The (Annualized) Sharpe Ratio###################
###Excess returns and the portfolio's Sharpe ratio###
#The yearly compounded interest rate is given by (1+y)^12âˆ’1
# rf and sp500_returns are pre-loaded

# Annualized risk free rate
annualized_rf <- (1 + rf)^12 - 1

#Plot the annualized risk free rate
plot.zoo(annualized_rf)
  
# Compute the series of excess portfolio returns 
sp500_excess <- sp500_returns - rf

# Compare the mean
mean(sp500_excess)
mean(sp500_returns)

# Compute the Sharpe ratio
sp500_sharpe <- mean(sp500_excess) / sd(sp500_returns) 

###Annualized mean and volatility###
# PerformanceAnalytics and sp500_returns are pre-loaded

# Annualized mean
Return.annualized(sp500_returns)

# Annualized standard deviation
StdDev.annualized(sp500_returns)

# Annualized Sharpe ratio
ann_sharpe <- (Return.annualized(sp500_returns)-0)/StdDev.annualized(sp500_returns)
#the sharpe ratio is found by taking the mean excess returns subtracted by the risk-free rate, and then divided by the volatility!

# All of the above at once
table.AnnualizedReturns(sp500_returns)

###################Time variation ##################
###Rolling annualized mean and volatility###
# sp500_returns is preloaded in your workspace
# SharpeRatio.annualized() to calculate the annualized Sharpe Ratio. 
#This function takes the arguments R, and Rf. The R argument takes an xts, vector, matrix, data.frame, timeSeries or zoo object of asset returns. 
#The Rf argument is necessary in SharpeRatio.annualized(), as it takes into account the risk-free rate in the same period of your returns. 
#For this example you can use the object rf to fulfill the Rf argument.

# Calculate the mean, volatility, and sharpe ratio
returns_ann <- Return.annualized(sp500_returns)
sd_ann <- StdDev.annualized(sp500_returns)
sharpe_ann <- SharpeRatio.annualized(sp500_returns, Rf = rf)

# Plotting the 12-month rolling annualized mean
chart.RollingPerformance(R = sp500_returns, width = 12, FUN = "Return.annualized")
abline(h = returns_ann)

# Plotting the 12-month rolling annualized standard deviation
chart.RollingPerformance(R = sp500_returns, width = 12,  FUN = "StdDev.annualized")
abline(h = sd_ann)

# Plotting the 12-month rolling annualized Sharpe ratio
chart.RollingPerformance(R = sp500_returns, width = 12, FUN = "SharpeRatio.annualized", Rf = rf)
abline(h = sharpe_ann)

# All three plots together
charts.RollingPerformance(R = sp500_returns, width = 12, Rf = rf)

###Subperiod performance analysis and the function window###
# Fill in window for 2008
sp500_2008 <- window(sp500_returns, start = "2008-01-01", end = "2008-12-31")

# Create window for 2014
sp500_2014 <- window(sp500_returns, start = "2014-01-01", end = "2014-12-31")

# Plotting
par(mfrow = c(1, 2) , mar=c(3, 2, 2, 2))
names(sp500_2008) <- "sp500_2008"
names(sp500_2014) <- "sp500_2014"

#Set the argument methods = c("add.density", "add.normal") to visualize the non-parametric estimate of the density and the density under and assumed normal distribution.
# Plot histogram of 2008
chart.Histogram(sp500_2008, methods = c("add.density", "add.normal"))

# Plot histogram of 2014
chart.Histogram(sp500_2014, methods = c("add.density", "add.normal"))


##################Non Normality of return Distribution####################
###skewness and kurtosis###
#  Compute the skewness 
  skewness(sp500_daily)
  skewness(sp500_monthly)

# Compute the excess kurtois 
kurtosis(sp500_daily)
kurtosis(sp500_monthly)
   
#### Downside risk measures###
# Calculate the SemiDeviation
SemiDeviation(sp500_monthly)

# Calculate the value at risk  to estimate the 2.5% and 5% value-at-risk of a monthly 
VaR(sp500_monthly, p = 0.05)
VaR(sp500_monthly, p = 0.025)

# Calculate the expected shortfall
ES(sp500_monthly, p = 0.05)
ES(sp500_monthly, p = 0.025)

###Drawdowns due to buying high, selling low####
# Table of drawdowns
# The function table.Drawdowns() in PerformanceAnalytics reports the five largest drawdown episodes over a sample period. 
table.Drawdowns(sp500_monthly)

# Plot of drawdowns
# The package also has another function chart.Drawdown() to visualize the evolution of the drawdowns from each peak over time.
chart.Drawdown(sp500_monthly)
